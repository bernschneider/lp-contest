/* LPCP Contest 2021 Problem 1: Jumpoing frog - using Planner module
by Peter Bernschneider, 24 Sep 2021
https://github.com/alviano/lpcp-contest-2021/tree/main/problem-1 */
import util, io, planner, sat.

main =>
    Inp = read_file_lines(), 
    {N,R0,C0} = Inp[1].convert(), % N = size of grid, (R0,C0) = frog starts here
    M0 = {convert(Inp[1+Row]) : Row in 1..N}, M0[R0,C0] := 1, 
    S0 = [M0,R0,C0], 
    plan(S0,Plan),
    println(len(Plan)),
    foreach([R, C] in Plan)
        printf("%d %d\n", R, C)
    end. 
/* all instances beside instance 8 terminate and are accepted by Checker.py */

final(State) =>
    State = [M,_,_],
    N = len(M),
    foreach(R in 1..N, C in 1..N) M[R,C] = 1 end.

heuristic(S) = Dist =>
    S = [M0,R0,C0], 
    N = len(M0),
    Dist = sum([cond(M0[R0, C] = 0, 1, 0) : C in 1..N]) + sum([cond(M0[R, C0] = 0, 1, 0) : R in 1..N]). % jump to a point with many possible jump targets

action(S, NextS, Action, Cost) =>
    S = [M,R0,C0],
    N = len(M),
    between(1, N, R), between(1, N, C), (R = R0; C = C0),
    M[R,C] = 0,
    Action = [R,C],
    Cost = 1,
    M1 = copy_term(M), M1[R,C] := 1,
    NextS = [M1,R,C]. 

convert(Line) = {to_int(Str) : Str in Line.split(" ")}. % convert an input line to an array of integers
