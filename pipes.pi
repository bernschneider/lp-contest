/* LPCP Contest 2021 Problem 3: Pipes - using constraint scc from Picat 3.1
by Peter Bernschneider, 24 Sep 2021
https://github.com/alviano/lpcp-contest-2021/tree/main/problem-3 */
import util, sat.

convert(Line) = [to_int(Str) : Str in Line.split(" ")]. % convert an input line to a list of integers

main =>
    main(["instance.0.in"]).
    
main([File]) =>
    Inp = read_file_lines(File), 
    [N] = Inp[1].convert(), % println([N), % N = size of grid
    TypOri = [convert(Inp[1+Row]) : Row in 1..N], % println(Obs),
    Typ    = [[TypOri[R,C] div 10 : C in 1..N ] : R in 1..N], % 1 = straight line, 2 = turn, 3 = endpoint, 5 = junction
    Vs = [{(R,C), 1} : R in 1..N, C in 1..N],
    Es = [{(R,C), (R1,C1), _} : R in 1..N, C in 1..N, (R1,C1) in [(R-1,C), (R,C-1), (R,C+1), (R+1,C)], 0<R1, R1=<N, 0<C1, C1=<N],
    EMap = new_map(), foreach({(R,C), (R1,C1), B} in Es) EMap.put({R,C,R1,C1}, B), EMap.put({R1,C1,R,C}, B) end,
    Nbcnt = [2,2,1,0,3], % Nbcnt[Typ[R,C]] = number of neighbors connected to R|C 
    foreach(R in 1..N, C in 1..N)
        Nbcnt[Typ[R,C]] #= sum([EMap.get({R,C,R1,C1}) : (R1,C1) in [(R-1,C), (R,C-1), (R,C+1), (R+1,C)], 0<R1, R1=<N, 0<C1, C1=<N]),
        if Typ[R,C] = 1 then 2 #= sum([EMap.get({R,C,R1,C}) : R1 in [R-1, R+1], 0<R1, R1=<N])
                         #\/ 2 #= sum([EMap.get({R,C,R,C1}) : C1 in [C-1, C+1], 0<C1, C1=<N]) end, % stright line
        if Typ[R,C] = 2 then 1 #= sum([EMap.get({R,C,R1,C}) : R1 in [R-1, R+1], 0<R1, R1=<N]),
                             1 #= sum([EMap.get({R,C,R,C1}) : C1 in [C-1, C+1], 0<C1, C1=<N]) end    % turn
    end,
    scc(Vs, Es), % all 1 cells are connected, a new global constraint in Picat version 3.1
    solve(values(EMap)), 
    E1 = [{(R1,C1), (R2,C2)} : {(R1,C1), (R2,C2), 1} in Es], println(E1),
    SGrid = "**o *", SHor = " -", SVer = " |",
    foreach (R in 1..N-1)
        foreach (C in 1..N-1) printf( "%c%c", SGrid[Typ[R,C]], SHor[1 + EMap.get({R,C, R,C+1})] ) end, println(SGrid[Typ[R,N]]),
        foreach (C in 1..N)   printf( "%c ",                   SVer[1 + EMap.get({R,C, R+1,C})] ) end, nl
    end,
    foreach (C in 1..N-1) printf( "%c%c", SGrid[Typ[N,C]], SHor[1 + EMap.get({N,C, N,C+1})] ) end, println(SGrid[Typ[N,N]]). /*
 */